name: Delete Old Cloudflare Pages Deployments for "bot"

on:
  push:
    branches:
      - main

jobs:
  delete_deployments:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install jq (for JSON parsing)
        run: sudo apt-get install jq

      - name: Configure Cloudflare API Token
        run: echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV

      - name: Fetch the list of projects and find the "bot" project
        run: |
          # Fetch the list of projects and filter to find the "bot" project
          project_response=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json")
          
          # Extract the ID of the "bot" project
          CLOUDFLARE_PROJECT_ID=$(echo "$project_response" | jq -r '.result[] | select(.name=="bot") | .id')
          
          if [ -z "$CLOUDFLARE_PROJECT_ID" ]; then
            echo "Project 'bot' not found!"
            exit 1
          else
            echo "Project ID for 'bot': $CLOUDFLARE_PROJECT_ID"
          fi
          
          # Set the project ID as an environment variable for use in subsequent steps
          echo "CLOUDFLARE_PROJECT_ID=$CLOUDFLARE_PROJECT_ID" >> $GITHUB_ENV

      - name: List and Delete Old Pages Deployments for "bot"
        run: |
          # Get the list of deployments for the "bot" project using the provided project ID
          deployments=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/$CLOUDFLARE_PROJECT_ID/deployments" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json")

          # Print the raw API response for debugging
          echo "API Response: $deployments"

          # Check if the deployments are empty or null
          if [ "$deployments" == "null" ] || [ -z "$deployments" ]; then
            echo "No deployments found for project 'bot'."
            exit 0
          fi

          # Get the current date in Unix timestamp
          current_date=$(date +%s)

          # Filter deployments older than 30 days (2592000 seconds)
          echo "$deployments" | jq -r '.result[] | select(.created_on | tonumber < ('$current_date' - 2592000)) | .id' | while read deployment_id; do
            echo "Deleting old deployment $deployment_id for 'bot' project"
            curl -X DELETE "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/$CLOUDFLARE_PROJECT_ID/deployments/$deployment_id" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json"
          done
